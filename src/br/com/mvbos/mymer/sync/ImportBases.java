/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mvbos.mymer.sync;

import br.com.mvbos.mymer.el.DataBaseElement;
import br.com.mvbos.mymer.el.IndexElement;
import br.com.mvbos.mymer.el.TableElement;
import br.com.mvbos.mymer.tree.FieldTreeNode;
import br.com.mvbos.mymer.tree.IndexTreeNode;
import br.com.mvbos.mymer.tree.TableTreeNode;
import br.com.mvbos.mymer.xml.DataBaseStore;
import br.com.mvbos.mymer.xml.XMLUtil;
import br.com.mvbos.mymer.xml.field.DataBase;
import br.com.mvbos.mymer.xml.field.Field;
import br.com.mvbos.mymer.xml.field.Index;
import br.com.mvbos.mymer.xml.field.Table;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author marcuss
 */
public class ImportBases extends javax.swing.JFrame {

    private DataBase remoteBases;

    /**
     * Creates new form ImportBases
     */
    public ImportBases() {
        initComponents();
        fc.setFileFilter(new FileNameExtensionFilter("XML File", "xml"));
    }

    private final Map<String, TableElement> localTalbles = new HashMap<>(30);
    private final Map<String, Table> remoteTables = new HashMap<>(30);

    private void populeListOrg(DataBaseStore db) {
        if (db != null && db.hasBases()) {
            remoteBases = db.getBases().get(0);

            localTalbles.clear();
            remoteTables.clear();

            DefaultListModel model = (DefaultListModel) lstOrg.getModel();
            model.removeAllElements();

            DataBaseElement dbe = XMLUtil.findByName(remoteBases.getName());

            for (TableElement te : dbe.getTables()) {
                localTalbles.put(te.getName(), te);
            }

            for (Table tb : remoteBases.getTables()) {
                remoteTables.put(tb.getName(), tb);

                String name = tb.getName();
                if (!localTalbles.containsKey(name)) {
                    name += " (new)";
                }

                model.addElement(name);
            }

            btnNext.setEnabled(true);
            lblDBInfo.setText("Database: " + remoteBases.getName());

        } else {
            btnNext.setEnabled(false);
            lblDBInfo.setText("No data base selected.");
        }
    }

    private final StringBuilder sb = new StringBuilder();
    private final StringBuilder sbt = new StringBuilder();

    private FieldTreeNode.Diff compareFields(Field fa, Field fb) {
        boolean change = false;
        sbt.delete(0, sbt.length());

        if (!fa.equals(fb)) {
            return FieldTreeNode.Diff.NONE;
        }

        java.lang.reflect.Field[] fields = fa.getClass().getDeclaredFields();

        for (java.lang.reflect.Field fl : fields) {
            try {
                java.lang.reflect.Field fr = fb.getClass().getDeclaredField(fl.getName());
                fl.setAccessible(true);
                fr.setAccessible(true);

                if (fl.get(fa) == null || fr.get(fb) == null) {
                    continue;
                }

                if (!fl.get(fa).equals(fr.get(fb))) {
                    sbt.append("\t");
                    sbt.append(fa.getName()).append(" change ").append(fl.getName());
                    sbt.append(" from ").append(fl.get(fa)).append(" to ").append(fr.get(fb));
                    sbt.append("\n");

                    change = true;
                }

            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {
                Logger.getLogger(ImportBases.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return change ? FieldTreeNode.Diff.FIELD : FieldTreeNode.Diff.NONE;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new javax.swing.JFileChooser();
        tab = new javax.swing.JTabbedPane();
        pnStepOne = new javax.swing.JPanel();
        tfOrigin = new javax.swing.JTextField();
        btnFile = new javax.swing.JButton();
        btnURL = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstOrg = new javax.swing.JList();
        btnAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstDst = new javax.swing.JList();
        btnAddAll = new javax.swing.JButton();
        btnRem = new javax.swing.JButton();
        btnRemAll = new javax.swing.JButton();
        pnStepTwo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstTablesConflict = new javax.swing.JList();
        pnStepThree = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        treeImport = new javax.swing.JTree();
        jScrollPane5 = new javax.swing.JScrollPane();
        tfLog = new javax.swing.JTextArea();
        btnUpdateAll = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        pnStepFour = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        indexImport = new javax.swing.JTree();
        jScrollPane7 = new javax.swing.JScrollPane();
        tfLog1 = new javax.swing.JTextArea();
        btnUpdateAll1 = new javax.swing.JButton();
        btnUpdate1 = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        lblDBInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Import Bases");

        btnFile.setText("File");
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });

        btnURL.setText("URL");
        btnURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnURLActionPerformed(evt);
            }
        });

        lstOrg.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(lstOrg);

        btnAdd.setText(">");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lstDst.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(lstDst);

        btnAddAll.setText(">>");
        btnAddAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAllActionPerformed(evt);
            }
        });

        btnRem.setText("<");
        btnRem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemActionPerformed(evt);
            }
        });

        btnRemAll.setText("<<");
        btnRemAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnStepOneLayout = new javax.swing.GroupLayout(pnStepOne);
        pnStepOne.setLayout(pnStepOneLayout);
        pnStepOneLayout.setHorizontalGroup(
            pnStepOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStepOneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnStepOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnStepOneLayout.createSequentialGroup()
                        .addComponent(tfOrigin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnURL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFile))
                    .addGroup(pnStepOneLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnStepOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAdd)
                            .addComponent(btnAddAll)
                            .addComponent(btnRem)
                            .addComponent(btnRemAll))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pnStepOneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnRem, btnRemAll});

        pnStepOneLayout.setVerticalGroup(
            pnStepOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStepOneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnStepOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFile)
                    .addComponent(btnURL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnStepOneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                    .addGroup(pnStepOneLayout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemAll)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        tab.addTab("Remote Tables", pnStepOne);

        jLabel1.setText("New local tables");

        lstTablesConflict.setModel(new DefaultListModel());
        jScrollPane3.setViewportView(lstTablesConflict);

        javax.swing.GroupLayout pnStepTwoLayout = new javax.swing.GroupLayout(pnStepTwo);
        pnStepTwo.setLayout(pnStepTwoLayout);
        pnStepTwoLayout.setHorizontalGroup(
            pnStepTwoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStepTwoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnStepTwoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnStepTwoLayout.setVerticalGroup(
            pnStepTwoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStepTwoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab.addTab("Local Tables", pnStepTwo);

        jScrollPane4.setViewportView(treeImport);

        tfLog.setColumns(20);
        tfLog.setRows(5);
        jScrollPane5.setViewportView(tfLog);

        btnUpdateAll.setText("Update all");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnStepThreeLayout = new javax.swing.GroupLayout(pnStepThree);
        pnStepThree.setLayout(pnStepThreeLayout);
        pnStepThreeLayout.setHorizontalGroup(
            pnStepThreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
            .addComponent(jScrollPane5)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnStepThreeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateAll)
                .addContainerGap())
        );
        pnStepThreeLayout.setVerticalGroup(
            pnStepThreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStepThreeLayout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnStepThreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateAll)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab.addTab("Fields Conflict", pnStepThree);

        jScrollPane6.setViewportView(indexImport);

        tfLog1.setColumns(20);
        tfLog1.setRows(5);
        jScrollPane7.setViewportView(tfLog1);

        btnUpdateAll1.setText("Update all");

        btnUpdate1.setText("Update");
        btnUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdate1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnStepFourLayout = new javax.swing.GroupLayout(pnStepFour);
        pnStepFour.setLayout(pnStepFourLayout);
        pnStepFourLayout.setHorizontalGroup(
            pnStepFourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
            .addComponent(jScrollPane7)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnStepFourLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateAll1)
                .addContainerGap())
        );
        pnStepFourLayout.setVerticalGroup(
            pnStepFourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnStepFourLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnStepFourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateAll1)
                    .addComponent(btnUpdate1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab.addTab("Index Conflict", pnStepFour);

        btnNext.setText("Next");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        lblDBInfo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDBInfo.setText("No data base selected.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tab)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnNext))
                    .addComponent(lblDBInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDBInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNext)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnURLActionPerformed

        tfOrigin.setEnabled(false);
        btnURL.setEnabled(false);

        try {
            URL url = new URL(tfOrigin.getText());

            Charset charset = Charset.forName("ISO-8859-1");
            InputStreamReader stream = new InputStreamReader(url.openStream(), charset);

            DataBaseStore db = XMLUtil.parseToDataBase(stream);

            populeListOrg(db);

        } catch (MalformedURLException ex) {
            Logger.getLogger(ImportBases.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ImportBases.class.getName()).log(Level.SEVERE, null, ex);

        } finally {
            tfOrigin.setEnabled(true);
            btnURL.setEnabled(true);
        }

    }//GEN-LAST:event_btnURLActionPerformed

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed

        fc.setCurrentDirectory(new File(tfOrigin.getText()));
        fc.showOpenDialog(this);

        File f = fc.getSelectedFile();
        if (f != null) {

            try {
                InputStreamReader stream = new InputStreamReader(new FileInputStream(f));
                DataBaseStore db = XMLUtil.parseToDataBase(stream);
                populeListOrg(db);

                tfOrigin.setText(f.getAbsolutePath());

            } catch (FileNotFoundException ex) {
                Logger.getLogger(ImportBases.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_btnFileActionPerformed

    private void btnAddAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAllActionPerformed

        DefaultListModel org = (DefaultListModel) lstOrg.getModel();
        DefaultListModel dst = (DefaultListModel) lstDst.getModel();

        for (Object o : org.toArray()) {
            dst.addElement(o);
        }

        org.removeAllElements();

    }//GEN-LAST:event_btnAddAllActionPerformed

    private void btnRemAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemAllActionPerformed

        DefaultListModel org = (DefaultListModel) lstDst.getModel();
        DefaultListModel dst = (DefaultListModel) lstOrg.getModel();

        for (Object o : org.toArray()) {
            dst.addElement(o);
        }

        org.removeAllElements();

    }//GEN-LAST:event_btnRemAllActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        DefaultListModel org = (DefaultListModel) lstOrg.getModel();
        DefaultListModel dst = (DefaultListModel) lstDst.getModel();

        for (Object o : lstOrg.getSelectedValuesList()) {
            dst.addElement(o);
            org.removeElement(o);
        }


    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemActionPerformed
        DefaultListModel org = (DefaultListModel) lstOrg.getModel();
        DefaultListModel dst = (DefaultListModel) lstDst.getModel();

        for (Object o : lstDst.getSelectedValuesList()) {
            org.addElement(o);
            dst.removeElement(o);
        }

    }//GEN-LAST:event_btnRemActionPerformed

    private DefaultMutableTreeNode tableRoot;
    private DefaultMutableTreeNode indexRoot;


    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed

        if (tab.getSelectedIndex() == 0) {
            runStepOne();

        } else if (tab.getSelectedIndex() == 1) {
            runStepTwo();

        } else {
            runStepThree();
        }


    }//GEN-LAST:event_btnNextActionPerformed

    private Map<String, Set<Field>> updateFields;

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        updateFields = new HashMap<>(tableRoot.getChildCount());

        TreePath[] selection = treeImport.getSelectionPaths();

        if (selection == null) {
            return;
        }

        for (TreePath p : selection) {
            DefaultMutableTreeNode path = (DefaultMutableTreeNode) p.getLastPathComponent();

            if (path.isRoot()) {
                continue;
            }

            if (path instanceof TableTreeNode) {
                TableTreeNode t = (TableTreeNode) path;

                Enumeration children = path.children();
                while (children.hasMoreElements()) {
                    FieldTreeNode f = (FieldTreeNode) children.nextElement();
                    addToUpdate(t.get(), f.get(), updateFields);
                }

                tableRoot.remove(t);
                treeImport.updateUI();

            } else {
                TableTreeNode t = (TableTreeNode) p.getParentPath().getLastPathComponent();
                FieldTreeNode f = (FieldTreeNode) path;
                addToUpdate(t.get(), f.get(), updateFields);

                t.remove(f);
                if (t.isLeaf()) {
                    tableRoot.remove(t);
                }

                treeImport.updateUI();
            }

        }


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdate1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdate1ActionPerformed

    private void runStepOne() {
        DefaultListModel model = (DefaultListModel) lstTablesConflict.getModel();
        model.removeAllElements();

        for (String name : localTalbles.keySet()) {
            if (!remoteTables.containsKey(name)) {
                model.addElement(name);
            }
        }

        tab.setSelectedIndex(1);
    }

    private void runStepTwo() {
        sb.delete(0, sb.length());

        if (tableRoot == null) {
            tableRoot = new DefaultMutableTreeNode("Tables");
        } else {
            tableRoot.removeAllChildren();
        }

        DefaultListModel dst = (DefaultListModel) lstDst.getModel();

        for (Object tbName : dst.toArray()) {
            TableElement lt = localTalbles.get(tbName.toString());

            if (lt == null) {
                continue;
            }

            Table rt = remoteTables.get(tbName.toString());

            DefaultMutableTreeNode ttn = new TableTreeNode(lt);

            //Compare local / remote
            for (Field locField : lt.getFields()) {
                FieldTreeNode ftn = new FieldTreeNode(locField);
                int idx = rt.getFields().indexOf(locField);

                if (idx > -1) {
                    Field remField = rt.getFields().get(idx);
                    FieldTreeNode.Diff diff = compareFields(locField, remField);
                    ftn.setDiff(diff);

                    if (FieldTreeNode.Diff.FIELD == diff) {
                        sb.append(tbName.toString()).append("\n");
                        sb.append(sbt);
                    }

                } else {
                    ftn.setDiff(FieldTreeNode.Diff.DELETED);
                }

                if (ftn.getDiff() != FieldTreeNode.Diff.NONE) {
                    ttn.add(ftn);
                }
            }

            //Compare remote / local
            for (Field remField : rt.getFields()) {

                int idx = lt.getFields().indexOf(remField);

                if (idx == -1) {
                    FieldTreeNode ftn = new FieldTreeNode(remField);
                    ftn.setDiff(FieldTreeNode.Diff.NEW);
                    ttn.add(ftn);
                }
            }

            if (!ttn.isLeaf()) {
                tableRoot.add(ttn);
            }
        }

        treeImport.setModel(new DefaultTreeModel(tableRoot));
        tab.setSelectedIndex(2);

        tfLog.setText(sb.toString());
    }

    private void runStepThree() {

        if (updateFields == null) {
            //tab.setSelectedIndex(4);
            return;
        }

        if (indexRoot == null) {
            indexRoot = new DefaultMutableTreeNode("Indices");
        } else {
            indexRoot.removeAllChildren();
        }

        for (String tbName : updateFields.keySet()) {
            Table rt = remoteTables.get(tbName);
            TableElement te = localTalbles.get(tbName);
            if (te == null) {
                te = new TableElement(0, 0, null, tbName);
            }

            DefaultMutableTreeNode ttn = new TableTreeNode(te);

            if (rt.getIndices() != null) {
                for (Index idx : rt.getIndices()) {
                    IndexTreeNode itn = new IndexTreeNode(new IndexElement(idx.getName(), te));
                    ttn.add(itn);
                }
            }

            indexRoot.add(ttn);

            /*Set<Field> f = updateFields.get(tbName);
             System.out.println(tbName);
             for (Field ff : f) {
             System.out.println("ff " + ff.getName());
             }*/
        }

        indexImport.setModel(new DefaultTreeModel(indexRoot));

        tab.setSelectedIndex(3);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportBases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportBases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportBases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportBases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImportBases().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddAll;
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnRem;
    private javax.swing.JButton btnRemAll;
    private javax.swing.JButton btnURL;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdate1;
    private javax.swing.JButton btnUpdateAll;
    private javax.swing.JButton btnUpdateAll1;
    private javax.swing.JFileChooser fc;
    private javax.swing.JTree indexImport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblDBInfo;
    private javax.swing.JList lstDst;
    private javax.swing.JList lstOrg;
    private javax.swing.JList lstTablesConflict;
    private javax.swing.JPanel pnStepFour;
    private javax.swing.JPanel pnStepOne;
    private javax.swing.JPanel pnStepThree;
    private javax.swing.JPanel pnStepTwo;
    private javax.swing.JTabbedPane tab;
    private javax.swing.JTextArea tfLog;
    private javax.swing.JTextArea tfLog1;
    private javax.swing.JTextField tfOrigin;
    private javax.swing.JTree treeImport;
    // End of variables declaration//GEN-END:variables

    private void addToUpdate(TableElement table, Field field, Map<String, Set<Field>> mapFields) {
        if (!mapFields.containsKey(table.getName())) {
            mapFields.put(table.getName(), new HashSet<Field>(20));
        }

        mapFields.get(table.getName()).add(field);
    }

}
