/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and openFromCache the template in the editor.
 */
package br.com.mvbos.mymer.sync;

import br.com.mvbos.mm.MMProperties;
import br.com.mvbos.mymer.el.DataBaseElement;
import br.com.mvbos.mymer.el.IndexElement;
import br.com.mvbos.mymer.el.TableElement;
import br.com.mvbos.mymer.entity.DataBaseEntity;
import br.com.mvbos.mymer.entity.EntityManager;
import br.com.mvbos.mymer.entity.EntityUtil;
import br.com.mvbos.mymer.entity.IndexEntity;
import br.com.mvbos.mymer.util.FileUtil;
import br.com.mvbos.mymer.xml.DataBaseStore;
import br.com.mvbos.mymer.xml.field.DataBase;
import br.com.mvbos.mymer.xml.field.Index;
import br.com.mvbos.mymer.xml.field.Table;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author marcuss
 */
public class DiffWindowExport extends javax.swing.JFrame {

    /**
     * Creates new form DiffExportWindow
     */
    public DiffWindowExport() {
        initComponents();

        final String path = MMProperties.get(DIFFER_EXPORT_DIRECTORY, "");
        tfInfo.setText(path);

        btnStart.setEnabled(new File(path).isDirectory());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeGroup = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        rQuick = new javax.swing.JRadioButton();
        rFull = new javax.swing.JRadioButton();
        btn = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        tfInfo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tfTip = new javax.swing.JTextArea();
        btnStart = new javax.swing.JButton();

        fileChooser.setCurrentDirectory(null);
        fileChooser.setDialogTitle("Select output directory");
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Differ export");
        setResizable(false);

        typeGroup.add(rQuick);
        rQuick.setSelected(true);
        rQuick.setText("Quick export");

        typeGroup.add(rFull);
        rFull.setText("Full export");

        btn.setText("Export to ...");
        btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        tfTip.setColumns(20);
        tfTip.setRows(5);
        tfTip.setText("Simple text description.");
        tfTip.setCaretPosition(0);
        tfTip.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(tfTip);

        btnStart.setText("Start");
        btnStart.setEnabled(false);
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfInfo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rQuick, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rFull, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 269, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rQuick)
                    .addComponent(rFull))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
        selectFile();
    }//GEN-LAST:event_btnActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        startExport();
    }//GEN-LAST:event_btnStartActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn;
    private javax.swing.JButton btnStart;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton rFull;
    private javax.swing.JRadioButton rQuick;
    private javax.swing.JTextField tfInfo;
    private javax.swing.JTextArea tfTip;
    private javax.swing.ButtonGroup typeGroup;
    // End of variables declaration//GEN-END:variables

    private void selectFile() {

        if (!tfInfo.getText().isEmpty()) {
            fileChooser.setCurrentDirectory(new File(tfInfo.getText()));
        }

        int select = fileChooser.showOpenDialog(this);

        if (select != JFileChooser.APPROVE_OPTION) {
            return;
        }

        tfInfo.setEditable(false);
        btnStart.setEnabled(true);
        tfInfo.setText(fileChooser.getSelectedFile().getAbsolutePath());

    }

    private void startExport() {
        btnStart.setEnabled(false);
        progressBar.setValue(1);

        new Thread() {
            String jira = "[JIRA]";
            final String defaultName = "%s_%s_%s";
            final String today = new SimpleDateFormat("ddMMyyyy").format(new Date());

            @Override
            public void run() {
                try {
                    File dir = fileChooser.getSelectedFile();
                    if (!dir.isDirectory()) {
                        return;
                    }

                    final EntityManager em = EntityManager.e();

                    final IndexEntity ie = EntityManager.e().getEntity(IndexEntity.class);

                    final StringBuilder sb = new StringBuilder();

                    final List<DataBaseElement> localBases = em.getEntity(DataBaseEntity.class).getList();

                    float percent = 100f / localBases.size();

                    final DataBaseStore dbs = FileUtil.open();

                    //sb.append("/* MM ").append(String.valueOf(Common.VERSION)).append("*/").append(System.lineSeparator());
                    for (DataBaseElement localBase : localBases) {
                        DataBase remote = EntityUtil.findBaseByName(dbs, localBase.getName());

                        if (remote == null) {
                            Differ.addBase(localBase, sb);
                            for (TableElement localTable : localBase.getTables()) {
                                Differ.addTable(localTable, sb);
                                Differ.addTableIndex(localTable, sb);
                            }

                        } else {
                            for (TableElement localTable : localBase.getTables()) {
                                Table remoteTable = EntityUtil.findTableByName(remote, localTable.getName());

                                if (remoteTable == null) {
                                    Differ.addTable(localTable, sb);
                                    Differ.addTableIndex(localTable, sb);

                                } else {
                                    List<IndexElement> tempList = Collections.EMPTY_LIST;

                                    if (remoteTable.getIndices() != null) {
                                        tempList = new ArrayList<>(remoteTable.getIndices().size());
                                        for (Index i : remoteTable.getIndices()) {
                                            tempList.add(new IndexElement(i, localTable));
                                        }
                                    }

                                    Differ.clear();
                                    Differ.compareTables(localTable, remoteTable);
                                    Differ.compareIndex(localTable, ie.findIndexByTable(localTable), tempList);
                                    sb.append(Differ.getString());
                                }
                            }

                            for (Table remoteTable : remote.getTables()) {
                                TableElement temp = EntityUtil.findTableByName(localBase, remoteTable.getName());
                                if (temp == null) {
                                    temp = new TableElement(localBase, remoteTable);
                                    Differ.removeTable(temp, sb);
                                }
                            }
                        }

                        if (sb.length() > 0 || rFull.isSelected()) {

                            String outputName = String.format(defaultName, localBase.getName(), jira, today);
                            outputName = outputName.concat(MMProperties.get(DIFFER_EXPORT_EXTENSION, ".df"));

                            FileUtil.write(dir.getAbsolutePath(), outputName, sb);
                            sb.delete(0, sb.length());
                        }

                        progressBar.setValue(progressBar.getValue() + Math.round(percent));
                    }

                    MMProperties.set(DIFFER_EXPORT_DIRECTORY, dir.getAbsolutePath());

                } catch (Exception e) {
                    Logger.getLogger(DiffWindowExport.class.getName()).log(Level.WARNING, e.getMessage());
                } finally {
                    tfInfo.setEditable(true);
                    btnStart.setEnabled(true);
                }
            }

        }.start();
    }

    private static final String DIFFER_EXPORT_EXTENSION = "differ_export_extension";
    private static final String DIFFER_EXPORT_DIRECTORY = "differ_export_directory";
}
