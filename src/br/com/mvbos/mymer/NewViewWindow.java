/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mvbos.mymer;

import br.com.mvbos.mymer.entity.EntityUtil;
import br.com.mvbos.jeg.element.ElementModel;
import br.com.mvbos.mymer.el.TableElement;
import br.com.mvbos.mymer.entity.DataBaseEntity;
import br.com.mvbos.mymer.entity.EntityManager;
import br.com.mvbos.mymer.entity.ViewEntity;
import br.com.mvbos.mymer.xml.field.View;
import br.com.mvbos.mymer.xml.field.ViewTable;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author MarcusS
 */
public class NewViewWindow extends javax.swing.JFrame {

    private int px;
    private short ct;

    private View viewSelected;
    private List<View> viewsList;
    private ElementModel[] selectedTables = new ElementModel[0];

    public ElementModel[] getSelectedTables() {
        return selectedTables;
    }

    public void setSelectedTables(ElementModel[] selectedTables) {
        this.selectedTables = selectedTables;
        temp.delete(0, temp.length());

        for (ct = 0; ct < selectedTables.length; ct++) {
            if (selectedTables[ct] == null) {
                break;
            }

            temp.append(selectedTables[ct].getName()).append(", ");
        }

        lblInfo.setText(String.format("%d tables selecteds.", ct));
    }

    /**
     * Creates new form NewViewWindow
     */
    public NewViewWindow() {
        initComponents();

        DefaultListModel<String> def = (DefaultListModel<String>) lstViews.getModel();

        viewsList = EntityManager.e().getEntity(ViewEntity.class).getList();

        if (viewsList != null) {
            for (View v : viewsList) {
                def.addElement(v.getName());
            }

        } else {
            viewsList = new ArrayList<>(5);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstViews = new javax.swing.JList();
        tfLabelTables = new javax.swing.JTextField();
        lblInfo = new javax.swing.JLabel();
        cbIgnore = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Management Views");

        lbl.setText("Name:");

        tfName.setText("New View");

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        lstViews.setModel(new DefaultListModel<String>());
        lstViews.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstViews.setToolTipText("Press delete to exclude the View");
        lstViews.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstViewsMouseClicked(evt);
            }
        });
        lstViews.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstViewsValueChanged(evt);
            }
        });
        lstViews.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lstViewsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(lstViews);

        tfLabelTables.setEditable(false);

        lblInfo.setText(" ");

        cbIgnore.setSelected(true);
        cbIgnore.setText("Ignore selecteds tables");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfName))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbIgnore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfLabelTables))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl)
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfLabelTables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInfo)
                    .addComponent(btnNext)
                    .addComponent(cbIgnore))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed

        openView();

    }//GEN-LAST:event_btnNextActionPerformed

    private void openView() throws HeadlessException {
        ViewWindow vw = new ViewWindow();

        if (viewSelected == null) {

            viewSelected = new View(tfName.getText());
            //List<TableElement> lst = new ArrayList<>(selectedTables.length);

            if (!cbIgnore.isSelected()) {
                for (ElementModel e : selectedTables) {
                    if (e instanceof TableElement) {
                        TableElement t = (TableElement) e;

                        //lst.add(t);
                        ViewTable v = new ViewTable(t.getDataBase().getName(), t.getName());
                        //vw.addTable(copy(t, v));
                        viewSelected.addTempTable(copy(t, v));
                        viewSelected.getTables().add(v);
                    }
                }
            }

            viewsList.add(viewSelected);

        } else {
            viewSelected.setName(tfName.getText());

            EntityManager em = EntityManager.e();
            DataBaseEntity dbEntity = em.getEntity(DataBaseEntity.class);

            //Validate if tables in view selected still exist
            List<ViewTable> selTemp = new ArrayList<>(viewSelected.getTables());
            for (ViewTable v : selTemp) {

                TableElement t = dbEntity.findByTableName(v.getDataBaseName(), v.getTableName());

                if (t == null) {
                    String msg = String.format("Apparently the table %s from %s don't exist more. Do you like do remove this?", v.getTableName(), v.getDataBaseName());
                    int res = JOptionPane.showConfirmDialog(this, msg);
                    if (res == JOptionPane.OK_OPTION) {
                        viewSelected.getTables().remove(v);
                    }
                    //Logger.getLogger(NewViewWindow.class.getName()).log(Level.INFO, "erro to find {0} {1}", new String[]{v.getDataBaseName(), v.getTableName()});
                    continue;
                }

                //vw.addTable(copy(t, v));
                viewSelected.addTempTable(copy(t, v));

                /*if (!selected.getTables().contains(v)) {
                 selected.getTables().add(new ViewTable(t.getDataBase().getName(), t.getName()));
                 }*/
            }

            if (!cbIgnore.isSelected()) {
                for (ElementModel e : selectedTables) {
                    if (e instanceof TableElement) {
                        TableElement t = (TableElement) e;

                        ViewTable v = new ViewTable(t.getDataBase().getName(), t.getName());

                        if (!viewSelected.getTables().contains(v)) {
                            //vw.addTable(copy(t, v));
                            viewSelected.addTempTable(copy(t, v));
                            viewSelected.getTables().add(v);
                        }
                    }
                }
            }
        }

        //Send all views do save
        vw.init(viewSelected, viewsList);
        vw.setVisible(true);

        this.dispose();
    }

    private final StringBuilder temp = new StringBuilder(100);

    private void lstViewsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstViewsValueChanged

        if (evt.getValueIsAdjusting()) {
            temp.delete(0, temp.length());

            viewSelected = viewsList.get(lstViews.getSelectedIndex());
            tfName.setText(viewSelected.getName());

            for (ViewTable v : viewSelected.getTables()) {
                temp.append(v.getTableName()).append(", ");
            }

            tfLabelTables.setText(temp.toString());

            lbl.setText("Change name to:");
        }

    }//GEN-LAST:event_lstViewsValueChanged

    private void lstViewsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstViewsKeyReleased

        int idx = lstViews.getSelectedIndex();
        if (idx == -1) {
            return;
        }

        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {

            viewsList.remove(idx);
            ((DefaultListModel) lstViews.getModel()).removeElementAt(idx);

            viewSelected = null;
            tfLabelTables.setText(null);

        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            openView();
        }

    }//GEN-LAST:event_lstViewsKeyReleased

    private void lstViewsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstViewsMouseClicked

        if (evt.getClickCount() == 2 && lstViews.getSelectedIndex() > -1) {
            openView();
        }

    }//GEN-LAST:event_lstViewsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JCheckBox cbIgnore;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JList lstViews;
    private javax.swing.JTextField tfLabelTables;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables

    private TableElement copy(TableElement t, ViewTable v) {
        TableElement copy = EntityUtil.copy(t);
        int ppx = v.getPx() == 0 ? px : v.getPx();

        copy.setPxy(ppx, v.getPy());

        return copy;
    }
}
